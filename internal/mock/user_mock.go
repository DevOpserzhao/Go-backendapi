// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "backend/internal/domain"
	types "backend/internal/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryFace is a mock of UserRepositoryFace interface.
type MockUserRepositoryFace struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryFaceMockRecorder
}

// MockUserRepositoryFaceMockRecorder is the mock recorder for MockUserRepositoryFace.
type MockUserRepositoryFaceMockRecorder struct {
	mock *MockUserRepositoryFace
}

// NewMockUserRepositoryFace creates a new mock instance.
func NewMockUserRepositoryFace(ctrl *gomock.Controller) *MockUserRepositoryFace {
	mock := &MockUserRepositoryFace{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryFace) EXPECT() *MockUserRepositoryFaceMockRecorder {
	return m.recorder
}

// CheckExistedAccountAndRegister mocks base method.
func (m *MockUserRepositoryFace) CheckExistedAccountAndRegister(arg0 *types.Register) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistedAccountAndRegister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExistedAccountAndRegister indicates an expected call of CheckExistedAccountAndRegister.
func (mr *MockUserRepositoryFaceMockRecorder) CheckExistedAccountAndRegister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistedAccountAndRegister", reflect.TypeOf((*MockUserRepositoryFace)(nil).CheckExistedAccountAndRegister), arg0)
}

// ChekLogin mocks base method.
func (m *MockUserRepositoryFace) ChekLogin(arg0 *types.Login) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChekLogin", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChekLogin indicates an expected call of ChekLogin.
func (mr *MockUserRepositoryFaceMockRecorder) ChekLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChekLogin", reflect.TypeOf((*MockUserRepositoryFace)(nil).ChekLogin), arg0)
}

// MockUserLogicFace is a mock of UserLogicFace interface.
type MockUserLogicFace struct {
	ctrl     *gomock.Controller
	recorder *MockUserLogicFaceMockRecorder
}

// MockUserLogicFaceMockRecorder is the mock recorder for MockUserLogicFace.
type MockUserLogicFaceMockRecorder struct {
	mock *MockUserLogicFace
}

// NewMockUserLogicFace creates a new mock instance.
func NewMockUserLogicFace(ctrl *gomock.Controller) *MockUserLogicFace {
	mock := &MockUserLogicFace{ctrl: ctrl}
	mock.recorder = &MockUserLogicFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLogicFace) EXPECT() *MockUserLogicFaceMockRecorder {
	return m.recorder
}

// UserLogin mocks base method.
func (m *MockUserLogicFace) UserLogin(arg0 *types.Login) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserLogicFaceMockRecorder) UserLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserLogicFace)(nil).UserLogin), arg0)
}

// UserLogout mocks base method.
func (m *MockUserLogicFace) UserLogout(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogout", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserLogout indicates an expected call of UserLogout.
func (mr *MockUserLogicFaceMockRecorder) UserLogout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogout", reflect.TypeOf((*MockUserLogicFace)(nil).UserLogout), arg0)
}

// UserRegister mocks base method.
func (m *MockUserLogicFace) UserRegister(arg0 *types.Register) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockUserLogicFaceMockRecorder) UserRegister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockUserLogicFace)(nil).UserRegister), arg0)
}
